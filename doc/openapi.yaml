openapi: 3.0.3
info:
  description: "Lorem ipsum"
  version: "1.0.0"
  title: "Gestproj"
  contact:
    email: "lorem@ipsum.com"
components:
  schemas:
    Groups:
      type: object
      properties:
        group_id:
          type: string
        group_name:
          type: string
        users_names:
          type: array
          items:
            properties:
              users_names:
                type: string
  parameters:
    group_id:
      in: path
      name: group_id
      description: GID
      required: true
      schema:
        type: integer
  responses:
    get-groups-200:
      description: GET groups list OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Groups"
          examples:
            200 - OK:
              $ref: "#/components/examples/get-groups-200"
  examples:
    get-groups-200:
      value:
        - group_id: 10001
          group_name: ccm1
          users_names:
            - users_names: "toto@toto.com"
            - users_names: "tata@tata.com"
        - group_id: 10002
          group_name: ccm2
          users_names:
            - users_names: "toto@toto.com"
            - users_names: "tata@tata.com"
paths:
  /api/v1/students:
    get:
      tags:
        - "groups"
      summary: "Retrieve all groups"
      operationId: "getGroups"
      responses:
        "200":
          $ref: "#/components/responses/get-groups-200"
        "404":
          description: "Groups not found"
    post:
      tags:
        - "groups"
      summary: "Create new group"
      operationId: "addGroup"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupName:
                  type: string
      responses:
        201:
          description: CREATED
        500:
          description: Internal server error
  /api/v1/students/{group_id}:
    get:
      tags:
        - "groups"
      summary: "Get group by GID"
      operationId: "getGroupById"
      parameters:
        - $ref: "#/components/parameters/group_id"
      responses:
        200:
          description: GET groups list OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Groups"
              examples:
                200:
                  value:
                    group_id: 10001
                    group_name: ccm1
                    users_names:
                      - users_names: "toto@toto.com"
                      - users_names: "tata@tata.com"
        404:
          description: "Not found - Could not find group with ID {groupId}"
    patch:
      tags:
        - "groups"
      summary: "Update group with new name"
      operationId: "patchGroup"
      parameters:
        - $ref: "#/components/parameters/group_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupName:
                  type: string
      responses:
        200:
          description: "Group with ID {groupId} has been updated"
        400:
          description: "Bad request - Missing mandatory input value"
        404:
          description: "Not found - Could not find group with ID {groupId}"
    delete:
      tags:
        - "groups"
      summary: "Delete group by GID"
      operationId: "deleteGroupById"
      parameters:
        - $ref: "#/components/parameters/group_id"
      responses:
        200:
          description: OK
        404:
          description: "Not found - Could not find group with ID {groupId}"
